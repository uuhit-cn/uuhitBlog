import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as e,o as a}from"./app-Dc5magyR.js";const t={};function l(p,s){return a(),i("div",null,s[0]||(s[0]=[e(`<h1 id="docker容器中的前端访问后端容器的几种路径" tabindex="-1"><a class="header-anchor" href="#docker容器中的前端访问后端容器的几种路径"><span>Docker容器中的前端访问后端容器的几种路径</span></a></h1><h2 id="一、环境" tabindex="-1"><a class="header-anchor" href="#一、环境"><span>一、环境</span></a></h2><p>阿里云服务器server01， IP：123.56.99.88；<br> 前端部署在docker容器 “prod-ngxin”，端口映射：80:80；<br> 后端docker容器 “prod-backend”，端口映射：48081:8080;<br> 容器都在docker网络 “prod-net”中。</p><p>结论：推荐 路径3 和 路径1</p><h2 id="二、-前端连接后端-的几种路径" tabindex="-1"><a class="header-anchor" href="#二、-前端连接后端-的几种路径"><span>二、“前端连接后端”的几种路径</span></a></h2><h3 id="_1、通过docker别名访问" tabindex="-1"><a class="header-anchor" href="#_1、通过docker别名访问"><span>1、通过docker别名访问</span></a></h3><p>必要条件：前后端容器都要在同一个(创建的)docker网络中。<br> nginx.cnf文件的proxy_pass中，url直接使用后端的容器名，端口使用后端容器中对应的端口。<br> 如下：</p><blockquote><p>proxy_pass http://<span style="color:red;">prod-backend</span>:8080/</p></blockquote><p>路径：prod-nginx 容器 → Docker DNS 解析容器名 → prod-backend 容器（直接通过 8080 端口）</p><p>优势：不受阿里云安全组限制、资源消耗最小、不暴露端口安全性高。<br> 注意，需要在后端的代码中考虑到其他容器别名等参数 或者 容器启动时设置参数。</p><p><span style="color:red;">推荐</span>。</p><p>完整nginx.cnf如下：</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">user  nginx;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">worker_processes  auto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">error_log  /var/log/nginx/error.log notice;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pid        /var/run/nginx.pid;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">events {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    worker_connections  1024;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    include       /etc/nginx/mime.types;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    default_type  application/octet-stream;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	sendfile        on;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    keepalive_timeout  65;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    access_log  /var/log/nginx/access.log  main;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    #tcp_nopush     on;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    #gzip  on;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    server {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		listen 80;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		server_name _;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		location / {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			root /usr/share/nginx/html;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			try_files $uri $uri/ /index.html;  # 将所有请求重定向到 index.html</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			index index.html index.htm;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		location /prod-api/ {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			proxy_set_header Host $http_host;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			proxy_set_header REMOTE-HOST $remote_addr;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			proxy_pass http://prod-backend:8080/;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		error_page   500 502 503 504  /50x.html;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        	location = /50x.html {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            		root   html;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       	 }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、通过公网访问" tabindex="-1"><a class="header-anchor" href="#_2、通过公网访问"><span>2、通过公网访问</span></a></h3><p>必要条件：阿里云安全组中“入方向”开放48081端口（来源建议限定“前端的IP”，本例是123.56.99.88）。<br> nginx.cnf配置如下：</p><blockquote><p>proxy_pass http://<span style="color:red;">123.56.99.88</span>:48081/</p></blockquote><p>路径：prod-nginx 容器 → Docker 网关 → 宿主机 eth0 → 公网出口 → 阿里云虚拟化层（安全组检查）→ 宿主机公网入口 → 宿主机端口 48081 → prod-backend 容器</p><p>优势：彻底的前后端分离，解耦程度最高。<br> 劣势：必须配置安全组规则、流量绕行公网，性能差、产生公网流量。</p><p>不能变动配置的情况下，最后的应急选择。</p><h3 id="_3、通过阿里云服务器内网ip-vpc-访问" tabindex="-1"><a class="header-anchor" href="#_3、通过阿里云服务器内网ip-vpc-访问"><span>3、通过阿里云服务器内网IP(VPC)访问</span></a></h3><p>必要条件：前端后端所在的宿主机，都是阿里云服务器。<br> 实测，对阿里云安全组并没有要求，不需要设置放行。<br> 当然，对docker网络也没有要求。</p><p>    步骤1、在后端服务器中ifconfig，确定eth:0 (或者eth:1) 的IP。 例如：172.27.152.x<br>     步骤2、ngxin.cnf如下，注意是用的是宿主机端口：</p><blockquote><p>proxy_pass http://<span style="color:red;">172.27.152.x</span>:48081/</p></blockquote><p>路径：prod-nginx 容器 → Docker 网关 → 宿主机 eth0 → 宿主机端口 48081 → prod-backend 容器</p><p>优势：解耦程度很高、只需要修改nginx的配置文件即可，不需要其他设置配合。<br>           不经过公网、不需要设置安全组（是的，虽然经过端口48081，但是不需要安全组放行48081的访问，实测如此）。</p><p><span style="color:red;">推荐</span>。</p><h3 id="_4、通过docker网桥ip访问" tabindex="-1"><a class="header-anchor" href="#_4、通过docker网桥ip访问"><span>4、通过docker网桥IP访问</span></a></h3><p>必要条件：前端和后端处于同一台服务器、同一个docker网络中（docker网桥一般情况下是每台服务器建立一个网络，默认不互通）。<br> 实测，对阿里云安全组并没有要求，不需要设置放行。</p><p>    步骤1、在后端服务器中ifconfig，确定IP。<br>             “docker0”对应的IP，是docker默认建立的，一般为172.17.0.1。<br>             “br-xxxxxx”对应的IP，是手动创建的docker网络。本例是prod-net，IP是17.19.0.1。<br>             这两个选用其中任意一个都可以，只要前端后端都在此网段中就行。<br>     步骤2、建议在前端容器ifconfig，查看一下对应IP，确保同一个网段中。<br>     步骤3、ngxin.cnf如下，注意是用的是宿主机端口：</p><blockquote><p>proxy_pass http://<span style="color:red;">172.17.0.1</span>:48081/</p></blockquote><p>路径：prod-nginx 容器 → Docker 网关 → 宿主机 eth0 → 宿主机端口 48081 → prod-backend 容器</p><p>优势：解耦程度很高、只需要修改nginx的配置文件即可，不需要其他设置配合。<br>           不经过公网、不需要设置安全组（是的，虽然经过端口48081，但是不需要安全组放行48081的访问，实测如此）。</p><p>劣势：不如 路径3。因为要考虑到前后端可能不在同一个docker网段中。</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>据说还有“host.docker.internal连接”、“127.0.0.1配合特定容器启动设置” 等连接方式，<br> 因为博主没用过，不了解。</p>`,35)]))}const c=n(t,[["render",l]]),o=JSON.parse('{"path":"/it/Docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84%E5%89%8D%E7%AB%AF%E8%AE%BF%E9%97%AE%E5%90%8E%E7%AB%AF%E5%AE%B9%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E8%B7%AF%E5%BE%84.html","title":"Docker容器中的前端访问后端容器的几种路径","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-08-13T00:00:00.000Z","order":11,"category":["nginx,docker"],"tag":["红","大","圆"],"description":"Docker容器中的前端访问后端容器的几种路径 一、环境 阿里云服务器server01， IP：123.56.99.88； 前端部署在docker容器 “prod-ngxin”，端口映射：80:80； 后端docker容器 “prod-backend”，端口映射：48081:8080; 容器都在docker网络 “prod-net”中。 结论：推荐 路...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker容器中的前端访问后端容器的几种路径\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-18T12:31:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"雨冬海\\",\\"url\\":\\"https://uuhit-cn.github.io/uuhitBlog/zh/\\"}]}"],["meta",{"property":"og:url","content":"https://uuhit-cn.github.io/uuhitBlog/it/Docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84%E5%89%8D%E7%AB%AF%E8%AE%BF%E9%97%AE%E5%90%8E%E7%AB%AF%E5%AE%B9%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E8%B7%AF%E5%BE%84.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:title","content":"Docker容器中的前端访问后端容器的几种路径"}],["meta",{"property":"og:description","content":"Docker容器中的前端访问后端容器的几种路径 一、环境 阿里云服务器server01， IP：123.56.99.88； 前端部署在docker容器 “prod-ngxin”，端口映射：80:80； 后端docker容器 “prod-backend”，端口映射：48081:8080; 容器都在docker网络 “prod-net”中。 结论：推荐 路..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T12:31:40.000Z"}],["meta",{"property":"article:tag","content":"圆"}],["meta",{"property":"article:tag","content":"大"}],["meta",{"property":"article:tag","content":"红"}],["meta",{"property":"article:published_time","content":"2025-08-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T12:31:40.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://uuhit-cn.github.io/uuhitBlog/zh/it/Docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84%E5%89%8D%E7%AB%AF%E8%AE%BF%E9%97%AE%E5%90%8E%E7%AB%AF%E5%AE%B9%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E8%B7%AF%E5%BE%84.html"}]]},"git":{"createdTime":1755520300000,"updatedTime":1755520300000,"contributors":[{"name":"uuhit","username":"uuhit","email":"43023022@qq.com","commits":1,"url":"https://github.com/uuhit"}]},"readingTime":{"minutes":4.02,"words":1206},"filePathRelative":"it/Docker容器中的前端访问后端容器的几种路径.md","excerpt":"\\n<h2>一、环境</h2>\\n<p>阿里云服务器server01， IP：123.56.99.88；<br>\\n前端部署在docker容器 “prod-ngxin”，端口映射：80:80；<br>\\n后端docker容器 “prod-backend”，端口映射：48081:8080;<br>\\n容器都在docker网络 “prod-net”中。</p>\\n<p>结论：推荐 路径3 和 路径1</p>\\n<h2>二、“前端连接后端”的几种路径</h2>\\n<h3>1、通过docker别名访问</h3>\\n<p>必要条件：前后端容器都要在同一个(创建的)docker网络中。<br>\\nnginx.cnf文件的proxy_pass中，url直接使用后端的容器名，端口使用后端容器中对应的端口。<br>\\n如下：</p>","autoDesc":true}');export{c as comp,o as data};
